; Definicion del segmento de codigo
CODE SEGMENT
	ASSUME CS: CODE
	ORG 256
	
start: JMP INICIO

; Variables globales
MATRIZDECODIFICACION DB 'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',0,1,2,3,4,5,6,7,8,9
MATRIZCODIFICACION DB 11,12,13,14,15,16,21,22,23,24,25,26,31,32,33,34,35,36,41,42,43,44,45,46,51,52,53,54,55,56,61,62,63,64,65,66
INSTALADOR_FUNCIONA DB "EL INSTALADOR ESTA EN MARCHA", 13, 0Ah, '$'
INSTALADO DB "EL PROGRAMA YA HA SIDO INSTALADO", 13, 0Ah, '$'
DESINSTALADOR_FUNCIONA DB "EL PROGRAMA HA SIDO DESINSTALADO", 13, 0Ah, '$'

; Rutina de servicio a la interrupcion
RSI PROC FAR
	; Salva registros modificados
	PUSH AX BX DX DI SI
	; Instrucciones de la rutina
	MOV DI, DX
	CMP AH, 12H
	JE DECODIFICACION
	CMP AH, 11H
	JE CODIFICACION
	MOV AH, 9
	MOV DX, OFFSET ERR
	INT 21h
	
CODIFICACION: 
	
	MOV AL, BYTE PTR [DI]
	CMP AL, '$'
	JE FIN
	CMP AL, 'Z'
	JLE LETRA
	JMP NUMERO
	JMP DECODIFICACION
LETRA:
	SUB AL, 65
	MOV SI, AL
	MOV BX , MATRIZCODIFICACION[SI]
	MOV DS:DI, BX
	JMP INCREMENTAR
NUMERO:
	SUB AL, 22
	MOV SI, AL
	MOV BX , MATRIZCODIFICACION[SI]
	MOV DS:DI, BX
	MOV DS:DI , BX
	JMP INCREMENTAR
INCREMENTARCOD:
	INC DX
	JMP CODIFICACION
	
DECODIFICACION: 
	MOV AL, BYTE PTR [DI]
	CMP AL, '$'
	JE FIN
	CMP AL, '11'
	JL ERR
	CMP AL, '16'
	JLE RESTAR11
	CMP AL, '26'
	JLE RESTAR15
	CMP AL, '36'
	JLE RESTAR19
	CMP AL, '46'
	JLE RESTAR23
	CMP AL, '56'
	JLE RESTAR27
	JMP ERR
	
RESTAR11:
	SUB AL, 11
	MOV SI, AL
	MOV BX , MATRIZDECODIFICACION[SI]
	MOV DS:DI, BX
	JMP INCREMENTAR
RESTAR15:
	SUB AL, 15
	MOV SI, AL
	MOV BX , MATRIZDECODIFICACION[SI]
	MOV DS:DI, BX
	JMP INCREMENTAR
RESTAR19:
	SUB AL, 19
	MOV SI, AL
	MOV BX , MATRIZDECODIFICACION[SI]
	MOV DS:DI, BX
	JMP INCREMENTAR
RESTAR23:
	SUB AL, 23
	MOV SI, AL
	MOV BX , MATRIZDECODIFICACION[SI]
	MOV DS:DI, BX
	JMP INCREMENTAR
RESTAR27:
	SUB AL, 27
	MOV SI, AL
	MOV BX , MATRIZDECODIFICACION[SI]
	MOV DS:DI, BX
	JMP INCREMENTAR
INCREMENTARDEC:
	INC DX
	JMP DECODIFICACION
	
FIN:
	POP SI DI DX BX AX
	IRET
RSI ENDP

INICIO PROC

	MOV BX, 80H
	MOV AH, DS:[BX]
	CMP AH, 0
	JNZ CON_PARAMETRO
	MOV AX, 0
	MOV ES, 0
	MOV AX, OFFSET RSI
	MOV SI, ES:[55h*4]
	CMP SI, AX
	JNZ DESINSTALADO_STATE
	MOV AH, 9
	MOV DX, OFFSET INSTALADO
	INT 21h
	
	MOV AH, 9
	MOV DX, OFFSET MENSAJE
	INT 21h
	MOV AX, 4C00h
	INT 21h
	
CON_PARAMETRO:
	MOV AX, DS:[BX + 2]
	CMP AL, '/'
	MOV AH, 9
	MOV DX, OFFSET ERR
	INT 21h
	MOV AX, 4C00h
	INT 21h
	CMP AH, 'd'
	JZ DESINSTALADOR ; Si parametro /d
	CMP AH, 'D'
	JZ DESINSTALADOR ; Si parametro /D
	CMP AH, 'i'
	JZ INSTALADOR   ; Si parametro /i
	CMP AH, 'I'
	JZ INSTALADOR   ; Si parametro /I

INICIO ENDP


INSTALADOR PROC
	MOV AX, 0
	MOV ES, AX
	
	MOV AX, OFFSET RSI
	CPM ES:[55h*4], AX ; Comprobamos si esta ya instalado
	JZ instalado
	
	MOV BX, CS
	CLI
	MOV ES:[55h*4], AX
	MOV ES:[55h*4 + 2], BX
	STI
	
	MOV AH, 9
	MOV DX, OFFSET INSTALADOR_FUNCIONA
	INT 21h
	MOV DX, OFFSET INSTALADOR
	INT 27H
	
instalado: 
	MOV AH, 9
	MOV DX, OFFSET INSTALADO
	INT 21h
	MOV AX, 4C00h
	INT 21h
INSTALADOR ENDP

DESINSTALADOR PROC
	PUSH AX BX CX DX DS ES
	
	MOV CX, 0
	MOV DS, EX ; Segmento de vectores de interrupcion
	MOV ES, DS:[55h*4 + 2] ; Lee segmento RSI
	MOV BX, ES:[2Ch] ; Lee segmento de entorno del PSP de RSI
	
	MOV AH, 49h
	INT 21h ; Libera el segmento de RSI (es)
	MOV ES, BX
	INT 21h ; Libera segmento de variables de entorno de RSI
	
	;Pone a cero vector de interrupcion 40h
	CLI
	MOV DS:[55h*4], CX ; CX = 0
	MOV DS:[55h*4 + 2], CX
	STI
	MOV AH, 9
	MOV DX, OFFSET DESINSTALADOR_FUNCIONA	
	INT 21h
	
	POP ES DS DX CX BX AX
	;;;;;;;;; PREGUNTAR
	MOV AX, 4C00H
    INT 21H	
DESINSTALADOR ENDP
